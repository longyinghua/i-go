// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gorm/dal/model"
)

func newSqlTest(db *gorm.DB, opts ...gen.DOOption) sqlTest {
	_sqlTest := sqlTest{}

	_sqlTest.sqlTestDo.UseDB(db, opts...)
	_sqlTest.sqlTestDo.UseModel(&model.SqlTest{})

	tableName := _sqlTest.sqlTestDo.TableName()
	_sqlTest.ALL = field.NewAsterisk(tableName)
	_sqlTest.ID = field.NewInt64(tableName, "id")
	_sqlTest.Name = field.NewString(tableName, "name")
	_sqlTest.Age = field.NewInt32(tableName, "age")

	_sqlTest.fillFieldMap()

	return _sqlTest
}

type sqlTest struct {
	sqlTestDo sqlTestDo

	ALL  field.Asterisk
	ID   field.Int64  // id
	Name field.String // 姓名
	Age  field.Int32  // 年龄

	fieldMap map[string]field.Expr
}

func (s sqlTest) Table(newTableName string) *sqlTest {
	s.sqlTestDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlTest) As(alias string) *sqlTest {
	s.sqlTestDo.DO = *(s.sqlTestDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlTest) updateTableName(table string) *sqlTest {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Age = field.NewInt32(table, "age")

	s.fillFieldMap()

	return s
}

func (s *sqlTest) WithContext(ctx context.Context) ISqlTestDo { return s.sqlTestDo.WithContext(ctx) }

func (s sqlTest) TableName() string { return s.sqlTestDo.TableName() }

func (s sqlTest) Alias() string { return s.sqlTestDo.Alias() }

func (s sqlTest) Columns(cols ...field.Expr) gen.Columns { return s.sqlTestDo.Columns(cols...) }

func (s *sqlTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlTest) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["age"] = s.Age
}

func (s sqlTest) clone(db *gorm.DB) sqlTest {
	s.sqlTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlTest) replaceDB(db *gorm.DB) sqlTest {
	s.sqlTestDo.ReplaceDB(db)
	return s
}

type sqlTestDo struct{ gen.DO }

type ISqlTestDo interface {
	gen.SubQuery
	Debug() ISqlTestDo
	WithContext(ctx context.Context) ISqlTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlTestDo
	WriteDB() ISqlTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlTestDo
	Not(conds ...gen.Condition) ISqlTestDo
	Or(conds ...gen.Condition) ISqlTestDo
	Select(conds ...field.Expr) ISqlTestDo
	Where(conds ...gen.Condition) ISqlTestDo
	Order(conds ...field.Expr) ISqlTestDo
	Distinct(cols ...field.Expr) ISqlTestDo
	Omit(cols ...field.Expr) ISqlTestDo
	Join(table schema.Tabler, on ...field.Expr) ISqlTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlTestDo
	Group(cols ...field.Expr) ISqlTestDo
	Having(conds ...gen.Condition) ISqlTestDo
	Limit(limit int) ISqlTestDo
	Offset(offset int) ISqlTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlTestDo
	Unscoped() ISqlTestDo
	Create(values ...*model.SqlTest) error
	CreateInBatches(values []*model.SqlTest, batchSize int) error
	Save(values ...*model.SqlTest) error
	First() (*model.SqlTest, error)
	Take() (*model.SqlTest, error)
	Last() (*model.SqlTest, error)
	Find() ([]*model.SqlTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlTest, err error)
	FindInBatches(result *[]*model.SqlTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlTestDo
	Assign(attrs ...field.AssignExpr) ISqlTestDo
	Joins(fields ...field.RelationField) ISqlTestDo
	Preload(fields ...field.RelationField) ISqlTestDo
	FirstOrInit() (*model.SqlTest, error)
	FirstOrCreate() (*model.SqlTest, error)
	FindByPage(offset int, limit int) (result []*model.SqlTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlTestDo) Debug() ISqlTestDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlTestDo) WithContext(ctx context.Context) ISqlTestDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlTestDo) ReadDB() ISqlTestDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlTestDo) WriteDB() ISqlTestDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlTestDo) Session(config *gorm.Session) ISqlTestDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlTestDo) Clauses(conds ...clause.Expression) ISqlTestDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlTestDo) Returning(value interface{}, columns ...string) ISqlTestDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlTestDo) Not(conds ...gen.Condition) ISqlTestDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlTestDo) Or(conds ...gen.Condition) ISqlTestDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlTestDo) Select(conds ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlTestDo) Where(conds ...gen.Condition) ISqlTestDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlTestDo) Order(conds ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlTestDo) Distinct(cols ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlTestDo) Omit(cols ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlTestDo) Join(table schema.Tabler, on ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlTestDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlTestDo) Group(cols ...field.Expr) ISqlTestDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlTestDo) Having(conds ...gen.Condition) ISqlTestDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlTestDo) Limit(limit int) ISqlTestDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlTestDo) Offset(offset int) ISqlTestDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlTestDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlTestDo) Unscoped() ISqlTestDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlTestDo) Create(values ...*model.SqlTest) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlTestDo) CreateInBatches(values []*model.SqlTest, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlTestDo) Save(values ...*model.SqlTest) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlTestDo) First() (*model.SqlTest, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlTest), nil
	}
}

func (s sqlTestDo) Take() (*model.SqlTest, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlTest), nil
	}
}

func (s sqlTestDo) Last() (*model.SqlTest, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlTest), nil
	}
}

func (s sqlTestDo) Find() ([]*model.SqlTest, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlTest), err
}

func (s sqlTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlTest, err error) {
	buf := make([]*model.SqlTest, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlTestDo) FindInBatches(result *[]*model.SqlTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlTestDo) Attrs(attrs ...field.AssignExpr) ISqlTestDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlTestDo) Assign(attrs ...field.AssignExpr) ISqlTestDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlTestDo) Joins(fields ...field.RelationField) ISqlTestDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlTestDo) Preload(fields ...field.RelationField) ISqlTestDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlTestDo) FirstOrInit() (*model.SqlTest, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlTest), nil
	}
}

func (s sqlTestDo) FirstOrCreate() (*model.SqlTest, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlTest), nil
	}
}

func (s sqlTestDo) FindByPage(offset int, limit int) (result []*model.SqlTest, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlTestDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlTestDo) Delete(models ...*model.SqlTest) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlTestDo) withDO(do gen.Dao) *sqlTestDo {
	s.DO = *do.(*gen.DO)
	return s
}
