// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gorm/dal/model"
)

func newMultipointPracticeDoctorInfo(db *gorm.DB, opts ...gen.DOOption) multipointPracticeDoctorInfo {
	_multipointPracticeDoctorInfo := multipointPracticeDoctorInfo{}

	_multipointPracticeDoctorInfo.multipointPracticeDoctorInfoDo.UseDB(db, opts...)
	_multipointPracticeDoctorInfo.multipointPracticeDoctorInfoDo.UseModel(&model.MultipointPracticeDoctorInfo{})

	tableName := _multipointPracticeDoctorInfo.multipointPracticeDoctorInfoDo.TableName()
	_multipointPracticeDoctorInfo.ALL = field.NewAsterisk(tableName)
	_multipointPracticeDoctorInfo.ID = field.NewInt64(tableName, "id")
	_multipointPracticeDoctorInfo.DrCode = field.NewString(tableName, "dr_code")
	_multipointPracticeDoctorInfo.DrName = field.NewString(tableName, "dr_name")
	_multipointPracticeDoctorInfo.DrMultiCode = field.NewString(tableName, "dr_multi_code")
	_multipointPracticeDoctorInfo.DeptMultiCode = field.NewString(tableName, "dept_multi_code")
	_multipointPracticeDoctorInfo.BaseDrID = field.NewInt64(tableName, "base_dr_id")
	_multipointPracticeDoctorInfo.HosID = field.NewInt64(tableName, "hos_id")
	_multipointPracticeDoctorInfo.PriDeptID = field.NewInt64(tableName, "pri_dept_id")
	_multipointPracticeDoctorInfo.SecDeptID = field.NewInt64(tableName, "sec_dept_id")
	_multipointPracticeDoctorInfo.DiagTypes = field.NewString(tableName, "diag_types")
	_multipointPracticeDoctorInfo.IsMaster = field.NewField(tableName, "is_master")
	_multipointPracticeDoctorInfo.ScheInfoJSON = field.NewString(tableName, "___sche_info_json")
	_multipointPracticeDoctorInfo.ApptRuleJSON = field.NewString(tableName, "___appt_rule_json")
	_multipointPracticeDoctorInfo.IsVideo = field.NewField(tableName, "is_video")
	_multipointPracticeDoctorInfo.IsChat = field.NewField(tableName, "is_chat")
	_multipointPracticeDoctorInfo.ShowGoodDoctor = field.NewField(tableName, "show_good_doctor")
	_multipointPracticeDoctorInfo.CurrentAppointNum = field.NewInt32(tableName, "current_appoint_num")
	_multipointPracticeDoctorInfo.CurrentAllAppointNum = field.NewInt32(tableName, "current_all_appoint_num")
	_multipointPracticeDoctorInfo.SourceID = field.NewInt64(tableName, "source_id")
	_multipointPracticeDoctorInfo.DrJSONInfo = field.NewString(tableName, "dr_json_info")
	_multipointPracticeDoctorInfo.CreateAt = field.NewTime(tableName, "create_at")
	_multipointPracticeDoctorInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_multipointPracticeDoctorInfo.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_multipointPracticeDoctorInfo.UpdateUserID = field.NewInt64(tableName, "update_user_id")
	_multipointPracticeDoctorInfo.OrderNum = field.NewInt32(tableName, "order_num")
	_multipointPracticeDoctorInfo.Version = field.NewInt32(tableName, "version")
	_multipointPracticeDoctorInfo.AppKey = field.NewString(tableName, "app_key")
	_multipointPracticeDoctorInfo.DeleteFlag = field.NewField(tableName, "delete_flag")
	_multipointPracticeDoctorInfo.UUID = field.NewString(tableName, "uuid")
	_multipointPracticeDoctorInfo.Status = field.NewInt32(tableName, "status")
	_multipointPracticeDoctorInfo.DraftData = field.NewString(tableName, "draft_data")
	_multipointPracticeDoctorInfo.ProjectID = field.NewInt64(tableName, "project_id")
	_multipointPracticeDoctorInfo.Tags = field.NewString(tableName, "tags")
	_multipointPracticeDoctorInfo.ZyID = field.NewString(tableName, "zy_id")

	_multipointPracticeDoctorInfo.fillFieldMap()

	return _multipointPracticeDoctorInfo
}

// multipointPracticeDoctorInfo 多点执业医生信息
type multipointPracticeDoctorInfo struct {
	multipointPracticeDoctorInfoDo multipointPracticeDoctorInfoDo

	ALL                  field.Asterisk
	ID                   field.Int64  // id
	DrCode               field.String // 医生工号
	DrName               field.String // 医生姓名
	DrMultiCode          field.String // 医生当前执业点医生代码
	DeptMultiCode        field.String // 医生当前执业点科室代码
	BaseDrID             field.Int64  // 基础医生id
	HosID                field.Int64  // 医院id
	PriDeptID            field.Int64  // 一级科室id
	SecDeptID            field.Int64  // 二级科室id
	DiagTypes            field.String // 医生门诊类型数组[], 0未设置 1特需门诊 2专家门诊 3专病专科门诊 4普通门诊 5高级专家门诊 6特约门诊 7疑难门诊 8名老中医 9膏方门诊 15特色门诊 703571精品门诊
	IsMaster             field.Field  // 是否主执业
	ScheInfoJSON         field.String // 排班信息json
	ApptRuleJSON         field.String // 放号规则json
	IsVideo              field.Field  // 视频问诊
	IsChat               field.Field  // 图文聊天问诊
	ShowGoodDoctor       field.Field  // 是否显示好医生
	CurrentAppointNum    field.Int32  // 当月已预约数
	CurrentAllAppointNum field.Int32  // 当月总号源数
	SourceID             field.Int64  // 号源id
	DrJSONInfo           field.String // 医生json详情
	CreateAt             field.Time   // 创建时间
	UpdateAt             field.Time   // 修改时间
	CreateUserID         field.Int64  // 创建人id
	UpdateUserID         field.Int64  // 修改人id
	OrderNum             field.Int32  // 序号
	Version              field.Int32  // 乐观锁号
	AppKey               field.String // 应用key
	DeleteFlag           field.Field  // 逻辑删除
	UUID                 field.String // uuid
	Status               field.Int32  // 业务状态，草稿，正常，禁用
	DraftData            field.String // 草稿
	ProjectID            field.Int64  // 项目id
	Tags                 field.String // 标签
	ZyID                 field.String

	fieldMap map[string]field.Expr
}

func (m multipointPracticeDoctorInfo) Table(newTableName string) *multipointPracticeDoctorInfo {
	m.multipointPracticeDoctorInfoDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multipointPracticeDoctorInfo) As(alias string) *multipointPracticeDoctorInfo {
	m.multipointPracticeDoctorInfoDo.DO = *(m.multipointPracticeDoctorInfoDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multipointPracticeDoctorInfo) updateTableName(table string) *multipointPracticeDoctorInfo {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.DrCode = field.NewString(table, "dr_code")
	m.DrName = field.NewString(table, "dr_name")
	m.DrMultiCode = field.NewString(table, "dr_multi_code")
	m.DeptMultiCode = field.NewString(table, "dept_multi_code")
	m.BaseDrID = field.NewInt64(table, "base_dr_id")
	m.HosID = field.NewInt64(table, "hos_id")
	m.PriDeptID = field.NewInt64(table, "pri_dept_id")
	m.SecDeptID = field.NewInt64(table, "sec_dept_id")
	m.DiagTypes = field.NewString(table, "diag_types")
	m.IsMaster = field.NewField(table, "is_master")
	m.ScheInfoJSON = field.NewString(table, "___sche_info_json")
	m.ApptRuleJSON = field.NewString(table, "___appt_rule_json")
	m.IsVideo = field.NewField(table, "is_video")
	m.IsChat = field.NewField(table, "is_chat")
	m.ShowGoodDoctor = field.NewField(table, "show_good_doctor")
	m.CurrentAppointNum = field.NewInt32(table, "current_appoint_num")
	m.CurrentAllAppointNum = field.NewInt32(table, "current_all_appoint_num")
	m.SourceID = field.NewInt64(table, "source_id")
	m.DrJSONInfo = field.NewString(table, "dr_json_info")
	m.CreateAt = field.NewTime(table, "create_at")
	m.UpdateAt = field.NewTime(table, "update_at")
	m.CreateUserID = field.NewInt64(table, "create_user_id")
	m.UpdateUserID = field.NewInt64(table, "update_user_id")
	m.OrderNum = field.NewInt32(table, "order_num")
	m.Version = field.NewInt32(table, "version")
	m.AppKey = field.NewString(table, "app_key")
	m.DeleteFlag = field.NewField(table, "delete_flag")
	m.UUID = field.NewString(table, "uuid")
	m.Status = field.NewInt32(table, "status")
	m.DraftData = field.NewString(table, "draft_data")
	m.ProjectID = field.NewInt64(table, "project_id")
	m.Tags = field.NewString(table, "tags")
	m.ZyID = field.NewString(table, "zy_id")

	m.fillFieldMap()

	return m
}

func (m *multipointPracticeDoctorInfo) WithContext(ctx context.Context) IMultipointPracticeDoctorInfoDo {
	return m.multipointPracticeDoctorInfoDo.WithContext(ctx)
}

func (m multipointPracticeDoctorInfo) TableName() string {
	return m.multipointPracticeDoctorInfoDo.TableName()
}

func (m multipointPracticeDoctorInfo) Alias() string { return m.multipointPracticeDoctorInfoDo.Alias() }

func (m multipointPracticeDoctorInfo) Columns(cols ...field.Expr) gen.Columns {
	return m.multipointPracticeDoctorInfoDo.Columns(cols...)
}

func (m *multipointPracticeDoctorInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multipointPracticeDoctorInfo) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 34)
	m.fieldMap["id"] = m.ID
	m.fieldMap["dr_code"] = m.DrCode
	m.fieldMap["dr_name"] = m.DrName
	m.fieldMap["dr_multi_code"] = m.DrMultiCode
	m.fieldMap["dept_multi_code"] = m.DeptMultiCode
	m.fieldMap["base_dr_id"] = m.BaseDrID
	m.fieldMap["hos_id"] = m.HosID
	m.fieldMap["pri_dept_id"] = m.PriDeptID
	m.fieldMap["sec_dept_id"] = m.SecDeptID
	m.fieldMap["diag_types"] = m.DiagTypes
	m.fieldMap["is_master"] = m.IsMaster
	m.fieldMap["___sche_info_json"] = m.ScheInfoJSON
	m.fieldMap["___appt_rule_json"] = m.ApptRuleJSON
	m.fieldMap["is_video"] = m.IsVideo
	m.fieldMap["is_chat"] = m.IsChat
	m.fieldMap["show_good_doctor"] = m.ShowGoodDoctor
	m.fieldMap["current_appoint_num"] = m.CurrentAppointNum
	m.fieldMap["current_all_appoint_num"] = m.CurrentAllAppointNum
	m.fieldMap["source_id"] = m.SourceID
	m.fieldMap["dr_json_info"] = m.DrJSONInfo
	m.fieldMap["create_at"] = m.CreateAt
	m.fieldMap["update_at"] = m.UpdateAt
	m.fieldMap["create_user_id"] = m.CreateUserID
	m.fieldMap["update_user_id"] = m.UpdateUserID
	m.fieldMap["order_num"] = m.OrderNum
	m.fieldMap["version"] = m.Version
	m.fieldMap["app_key"] = m.AppKey
	m.fieldMap["delete_flag"] = m.DeleteFlag
	m.fieldMap["uuid"] = m.UUID
	m.fieldMap["status"] = m.Status
	m.fieldMap["draft_data"] = m.DraftData
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["tags"] = m.Tags
	m.fieldMap["zy_id"] = m.ZyID
}

func (m multipointPracticeDoctorInfo) clone(db *gorm.DB) multipointPracticeDoctorInfo {
	m.multipointPracticeDoctorInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multipointPracticeDoctorInfo) replaceDB(db *gorm.DB) multipointPracticeDoctorInfo {
	m.multipointPracticeDoctorInfoDo.ReplaceDB(db)
	return m
}

type multipointPracticeDoctorInfoDo struct{ gen.DO }

type IMultipointPracticeDoctorInfoDo interface {
	gen.SubQuery
	Debug() IMultipointPracticeDoctorInfoDo
	WithContext(ctx context.Context) IMultipointPracticeDoctorInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMultipointPracticeDoctorInfoDo
	WriteDB() IMultipointPracticeDoctorInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMultipointPracticeDoctorInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMultipointPracticeDoctorInfoDo
	Not(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo
	Or(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo
	Select(conds ...field.Expr) IMultipointPracticeDoctorInfoDo
	Where(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo
	Order(conds ...field.Expr) IMultipointPracticeDoctorInfoDo
	Distinct(cols ...field.Expr) IMultipointPracticeDoctorInfoDo
	Omit(cols ...field.Expr) IMultipointPracticeDoctorInfoDo
	Join(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo
	Group(cols ...field.Expr) IMultipointPracticeDoctorInfoDo
	Having(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo
	Limit(limit int) IMultipointPracticeDoctorInfoDo
	Offset(offset int) IMultipointPracticeDoctorInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMultipointPracticeDoctorInfoDo
	Unscoped() IMultipointPracticeDoctorInfoDo
	Create(values ...*model.MultipointPracticeDoctorInfo) error
	CreateInBatches(values []*model.MultipointPracticeDoctorInfo, batchSize int) error
	Save(values ...*model.MultipointPracticeDoctorInfo) error
	First() (*model.MultipointPracticeDoctorInfo, error)
	Take() (*model.MultipointPracticeDoctorInfo, error)
	Last() (*model.MultipointPracticeDoctorInfo, error)
	Find() ([]*model.MultipointPracticeDoctorInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MultipointPracticeDoctorInfo, err error)
	FindInBatches(result *[]*model.MultipointPracticeDoctorInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MultipointPracticeDoctorInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMultipointPracticeDoctorInfoDo
	Assign(attrs ...field.AssignExpr) IMultipointPracticeDoctorInfoDo
	Joins(fields ...field.RelationField) IMultipointPracticeDoctorInfoDo
	Preload(fields ...field.RelationField) IMultipointPracticeDoctorInfoDo
	FirstOrInit() (*model.MultipointPracticeDoctorInfo, error)
	FirstOrCreate() (*model.MultipointPracticeDoctorInfo, error)
	FindByPage(offset int, limit int) (result []*model.MultipointPracticeDoctorInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMultipointPracticeDoctorInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m multipointPracticeDoctorInfoDo) Debug() IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Debug())
}

func (m multipointPracticeDoctorInfoDo) WithContext(ctx context.Context) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multipointPracticeDoctorInfoDo) ReadDB() IMultipointPracticeDoctorInfoDo {
	return m.Clauses(dbresolver.Read)
}

func (m multipointPracticeDoctorInfoDo) WriteDB() IMultipointPracticeDoctorInfoDo {
	return m.Clauses(dbresolver.Write)
}

func (m multipointPracticeDoctorInfoDo) Session(config *gorm.Session) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Session(config))
}

func (m multipointPracticeDoctorInfoDo) Clauses(conds ...clause.Expression) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multipointPracticeDoctorInfoDo) Returning(value interface{}, columns ...string) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multipointPracticeDoctorInfoDo) Not(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multipointPracticeDoctorInfoDo) Or(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multipointPracticeDoctorInfoDo) Select(conds ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multipointPracticeDoctorInfoDo) Where(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multipointPracticeDoctorInfoDo) Order(conds ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multipointPracticeDoctorInfoDo) Distinct(cols ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multipointPracticeDoctorInfoDo) Omit(cols ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multipointPracticeDoctorInfoDo) Join(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multipointPracticeDoctorInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multipointPracticeDoctorInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multipointPracticeDoctorInfoDo) Group(cols ...field.Expr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multipointPracticeDoctorInfoDo) Having(conds ...gen.Condition) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multipointPracticeDoctorInfoDo) Limit(limit int) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multipointPracticeDoctorInfoDo) Offset(offset int) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multipointPracticeDoctorInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multipointPracticeDoctorInfoDo) Unscoped() IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multipointPracticeDoctorInfoDo) Create(values ...*model.MultipointPracticeDoctorInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multipointPracticeDoctorInfoDo) CreateInBatches(values []*model.MultipointPracticeDoctorInfo, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multipointPracticeDoctorInfoDo) Save(values ...*model.MultipointPracticeDoctorInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multipointPracticeDoctorInfoDo) First() (*model.MultipointPracticeDoctorInfo, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultipointPracticeDoctorInfo), nil
	}
}

func (m multipointPracticeDoctorInfoDo) Take() (*model.MultipointPracticeDoctorInfo, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultipointPracticeDoctorInfo), nil
	}
}

func (m multipointPracticeDoctorInfoDo) Last() (*model.MultipointPracticeDoctorInfo, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultipointPracticeDoctorInfo), nil
	}
}

func (m multipointPracticeDoctorInfoDo) Find() ([]*model.MultipointPracticeDoctorInfo, error) {
	result, err := m.DO.Find()
	return result.([]*model.MultipointPracticeDoctorInfo), err
}

func (m multipointPracticeDoctorInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MultipointPracticeDoctorInfo, err error) {
	buf := make([]*model.MultipointPracticeDoctorInfo, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multipointPracticeDoctorInfoDo) FindInBatches(result *[]*model.MultipointPracticeDoctorInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multipointPracticeDoctorInfoDo) Attrs(attrs ...field.AssignExpr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multipointPracticeDoctorInfoDo) Assign(attrs ...field.AssignExpr) IMultipointPracticeDoctorInfoDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multipointPracticeDoctorInfoDo) Joins(fields ...field.RelationField) IMultipointPracticeDoctorInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multipointPracticeDoctorInfoDo) Preload(fields ...field.RelationField) IMultipointPracticeDoctorInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multipointPracticeDoctorInfoDo) FirstOrInit() (*model.MultipointPracticeDoctorInfo, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultipointPracticeDoctorInfo), nil
	}
}

func (m multipointPracticeDoctorInfoDo) FirstOrCreate() (*model.MultipointPracticeDoctorInfo, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultipointPracticeDoctorInfo), nil
	}
}

func (m multipointPracticeDoctorInfoDo) FindByPage(offset int, limit int) (result []*model.MultipointPracticeDoctorInfo, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multipointPracticeDoctorInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multipointPracticeDoctorInfoDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multipointPracticeDoctorInfoDo) Delete(models ...*model.MultipointPracticeDoctorInfo) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multipointPracticeDoctorInfoDo) withDO(do gen.Dao) *multipointPracticeDoctorInfoDo {
	m.DO = *do.(*gen.DO)
	return m
}
