// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gorm-swagger-zap/dal/model"
)

func newHospitalDeptInfo(db *gorm.DB, opts ...gen.DOOption) hospitalDeptInfo {
	_hospitalDeptInfo := hospitalDeptInfo{}

	_hospitalDeptInfo.hospitalDeptInfoDo.UseDB(db, opts...)
	_hospitalDeptInfo.hospitalDeptInfoDo.UseModel(&model.HospitalDeptInfo{})

	tableName := _hospitalDeptInfo.hospitalDeptInfoDo.TableName()
	_hospitalDeptInfo.ALL = field.NewAsterisk(tableName)
	_hospitalDeptInfo.ID = field.NewInt64(tableName, "id")
	_hospitalDeptInfo.GlobalDeptCode = field.NewString(tableName, "global_dept_code")
	_hospitalDeptInfo.HosID = field.NewInt64(tableName, "hos_id")
	_hospitalDeptInfo.ParentID = field.NewInt64(tableName, "parent_id")
	_hospitalDeptInfo.DeptName = field.NewString(tableName, "dept_name")
	_hospitalDeptInfo.DeptCode = field.NewString(tableName, "dept_code")
	_hospitalDeptInfo.DeptDescription = field.NewString(tableName, "dept_description")
	_hospitalDeptInfo.IsImportant = field.NewField(tableName, "is_important")
	_hospitalDeptInfo.IsHot = field.NewField(tableName, "is_hot")
	_hospitalDeptInfo.CreateAt = field.NewTime(tableName, "create_at")
	_hospitalDeptInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_hospitalDeptInfo.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_hospitalDeptInfo.UpdateUserID = field.NewInt64(tableName, "update_user_id")
	_hospitalDeptInfo.OrderNum = field.NewInt32(tableName, "order_num")
	_hospitalDeptInfo.Version = field.NewInt32(tableName, "version")
	_hospitalDeptInfo.AppKey = field.NewString(tableName, "app_key")
	_hospitalDeptInfo.DeleteFlag = field.NewField(tableName, "delete_flag")
	_hospitalDeptInfo.UUID = field.NewString(tableName, "uuid")
	_hospitalDeptInfo.Status = field.NewInt32(tableName, "status")
	_hospitalDeptInfo.DraftData = field.NewString(tableName, "draft_data")
	_hospitalDeptInfo.ProjectID = field.NewInt64(tableName, "project_id")
	_hospitalDeptInfo.Tags = field.NewString(tableName, "tags")
	_hospitalDeptInfo.ZyID = field.NewString(tableName, "zy_id")

	_hospitalDeptInfo.fillFieldMap()

	return _hospitalDeptInfo
}

// hospitalDeptInfo 医院科室信息
type hospitalDeptInfo struct {
	hospitalDeptInfoDo hospitalDeptInfoDo

	ALL             field.Asterisk
	ID              field.Int64  // id
	GlobalDeptCode  field.String // 全局科室代码
	HosID           field.Int64  // 医院id
	ParentID        field.Int64  // 上级科室id(一级0)
	DeptName        field.String // 科室名称
	DeptCode        field.String // 科室代码
	DeptDescription field.String // 科室描述
	IsImportant     field.Field  // 重点科室
	IsHot           field.Field  // 热门
	CreateAt        field.Time   // 创建时间
	UpdateAt        field.Time   // 修改时间
	CreateUserID    field.Int64  // 创建人id
	UpdateUserID    field.Int64  // 修改人id
	OrderNum        field.Int32  // 序号
	Version         field.Int32  // 乐观锁号
	AppKey          field.String // 应用key
	DeleteFlag      field.Field  // 逻辑删除
	UUID            field.String // uuid
	Status          field.Int32  // 业务状态，草稿，正常，禁用
	DraftData       field.String // 草稿
	ProjectID       field.Int64  // 项目id
	Tags            field.String // 标签
	ZyID            field.String

	fieldMap map[string]field.Expr
}

func (h hospitalDeptInfo) Table(newTableName string) *hospitalDeptInfo {
	h.hospitalDeptInfoDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hospitalDeptInfo) As(alias string) *hospitalDeptInfo {
	h.hospitalDeptInfoDo.DO = *(h.hospitalDeptInfoDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hospitalDeptInfo) updateTableName(table string) *hospitalDeptInfo {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.GlobalDeptCode = field.NewString(table, "global_dept_code")
	h.HosID = field.NewInt64(table, "hos_id")
	h.ParentID = field.NewInt64(table, "parent_id")
	h.DeptName = field.NewString(table, "dept_name")
	h.DeptCode = field.NewString(table, "dept_code")
	h.DeptDescription = field.NewString(table, "dept_description")
	h.IsImportant = field.NewField(table, "is_important")
	h.IsHot = field.NewField(table, "is_hot")
	h.CreateAt = field.NewTime(table, "create_at")
	h.UpdateAt = field.NewTime(table, "update_at")
	h.CreateUserID = field.NewInt64(table, "create_user_id")
	h.UpdateUserID = field.NewInt64(table, "update_user_id")
	h.OrderNum = field.NewInt32(table, "order_num")
	h.Version = field.NewInt32(table, "version")
	h.AppKey = field.NewString(table, "app_key")
	h.DeleteFlag = field.NewField(table, "delete_flag")
	h.UUID = field.NewString(table, "uuid")
	h.Status = field.NewInt32(table, "status")
	h.DraftData = field.NewString(table, "draft_data")
	h.ProjectID = field.NewInt64(table, "project_id")
	h.Tags = field.NewString(table, "tags")
	h.ZyID = field.NewString(table, "zy_id")

	h.fillFieldMap()

	return h
}

func (h *hospitalDeptInfo) WithContext(ctx context.Context) IHospitalDeptInfoDo {
	return h.hospitalDeptInfoDo.WithContext(ctx)
}

func (h hospitalDeptInfo) TableName() string { return h.hospitalDeptInfoDo.TableName() }

func (h hospitalDeptInfo) Alias() string { return h.hospitalDeptInfoDo.Alias() }

func (h hospitalDeptInfo) Columns(cols ...field.Expr) gen.Columns {
	return h.hospitalDeptInfoDo.Columns(cols...)
}

func (h *hospitalDeptInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hospitalDeptInfo) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 23)
	h.fieldMap["id"] = h.ID
	h.fieldMap["global_dept_code"] = h.GlobalDeptCode
	h.fieldMap["hos_id"] = h.HosID
	h.fieldMap["parent_id"] = h.ParentID
	h.fieldMap["dept_name"] = h.DeptName
	h.fieldMap["dept_code"] = h.DeptCode
	h.fieldMap["dept_description"] = h.DeptDescription
	h.fieldMap["is_important"] = h.IsImportant
	h.fieldMap["is_hot"] = h.IsHot
	h.fieldMap["create_at"] = h.CreateAt
	h.fieldMap["update_at"] = h.UpdateAt
	h.fieldMap["create_user_id"] = h.CreateUserID
	h.fieldMap["update_user_id"] = h.UpdateUserID
	h.fieldMap["order_num"] = h.OrderNum
	h.fieldMap["version"] = h.Version
	h.fieldMap["app_key"] = h.AppKey
	h.fieldMap["delete_flag"] = h.DeleteFlag
	h.fieldMap["uuid"] = h.UUID
	h.fieldMap["status"] = h.Status
	h.fieldMap["draft_data"] = h.DraftData
	h.fieldMap["project_id"] = h.ProjectID
	h.fieldMap["tags"] = h.Tags
	h.fieldMap["zy_id"] = h.ZyID
}

func (h hospitalDeptInfo) clone(db *gorm.DB) hospitalDeptInfo {
	h.hospitalDeptInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hospitalDeptInfo) replaceDB(db *gorm.DB) hospitalDeptInfo {
	h.hospitalDeptInfoDo.ReplaceDB(db)
	return h
}

type hospitalDeptInfoDo struct{ gen.DO }

type IHospitalDeptInfoDo interface {
	gen.SubQuery
	Debug() IHospitalDeptInfoDo
	WithContext(ctx context.Context) IHospitalDeptInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHospitalDeptInfoDo
	WriteDB() IHospitalDeptInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHospitalDeptInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHospitalDeptInfoDo
	Not(conds ...gen.Condition) IHospitalDeptInfoDo
	Or(conds ...gen.Condition) IHospitalDeptInfoDo
	Select(conds ...field.Expr) IHospitalDeptInfoDo
	Where(conds ...gen.Condition) IHospitalDeptInfoDo
	Order(conds ...field.Expr) IHospitalDeptInfoDo
	Distinct(cols ...field.Expr) IHospitalDeptInfoDo
	Omit(cols ...field.Expr) IHospitalDeptInfoDo
	Join(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo
	Group(cols ...field.Expr) IHospitalDeptInfoDo
	Having(conds ...gen.Condition) IHospitalDeptInfoDo
	Limit(limit int) IHospitalDeptInfoDo
	Offset(offset int) IHospitalDeptInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHospitalDeptInfoDo
	Unscoped() IHospitalDeptInfoDo
	Create(values ...*model.HospitalDeptInfo) error
	CreateInBatches(values []*model.HospitalDeptInfo, batchSize int) error
	Save(values ...*model.HospitalDeptInfo) error
	First() (*model.HospitalDeptInfo, error)
	Take() (*model.HospitalDeptInfo, error)
	Last() (*model.HospitalDeptInfo, error)
	Find() ([]*model.HospitalDeptInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HospitalDeptInfo, err error)
	FindInBatches(result *[]*model.HospitalDeptInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HospitalDeptInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHospitalDeptInfoDo
	Assign(attrs ...field.AssignExpr) IHospitalDeptInfoDo
	Joins(fields ...field.RelationField) IHospitalDeptInfoDo
	Preload(fields ...field.RelationField) IHospitalDeptInfoDo
	FirstOrInit() (*model.HospitalDeptInfo, error)
	FirstOrCreate() (*model.HospitalDeptInfo, error)
	FindByPage(offset int, limit int) (result []*model.HospitalDeptInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHospitalDeptInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hospitalDeptInfoDo) Debug() IHospitalDeptInfoDo {
	return h.withDO(h.DO.Debug())
}

func (h hospitalDeptInfoDo) WithContext(ctx context.Context) IHospitalDeptInfoDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hospitalDeptInfoDo) ReadDB() IHospitalDeptInfoDo {
	return h.Clauses(dbresolver.Read)
}

func (h hospitalDeptInfoDo) WriteDB() IHospitalDeptInfoDo {
	return h.Clauses(dbresolver.Write)
}

func (h hospitalDeptInfoDo) Session(config *gorm.Session) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Session(config))
}

func (h hospitalDeptInfoDo) Clauses(conds ...clause.Expression) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hospitalDeptInfoDo) Returning(value interface{}, columns ...string) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hospitalDeptInfoDo) Not(conds ...gen.Condition) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hospitalDeptInfoDo) Or(conds ...gen.Condition) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hospitalDeptInfoDo) Select(conds ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hospitalDeptInfoDo) Where(conds ...gen.Condition) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hospitalDeptInfoDo) Order(conds ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hospitalDeptInfoDo) Distinct(cols ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hospitalDeptInfoDo) Omit(cols ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hospitalDeptInfoDo) Join(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hospitalDeptInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hospitalDeptInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hospitalDeptInfoDo) Group(cols ...field.Expr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hospitalDeptInfoDo) Having(conds ...gen.Condition) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hospitalDeptInfoDo) Limit(limit int) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hospitalDeptInfoDo) Offset(offset int) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hospitalDeptInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hospitalDeptInfoDo) Unscoped() IHospitalDeptInfoDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hospitalDeptInfoDo) Create(values ...*model.HospitalDeptInfo) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hospitalDeptInfoDo) CreateInBatches(values []*model.HospitalDeptInfo, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hospitalDeptInfoDo) Save(values ...*model.HospitalDeptInfo) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hospitalDeptInfoDo) First() (*model.HospitalDeptInfo, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HospitalDeptInfo), nil
	}
}

func (h hospitalDeptInfoDo) Take() (*model.HospitalDeptInfo, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HospitalDeptInfo), nil
	}
}

func (h hospitalDeptInfoDo) Last() (*model.HospitalDeptInfo, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HospitalDeptInfo), nil
	}
}

func (h hospitalDeptInfoDo) Find() ([]*model.HospitalDeptInfo, error) {
	result, err := h.DO.Find()
	return result.([]*model.HospitalDeptInfo), err
}

func (h hospitalDeptInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HospitalDeptInfo, err error) {
	buf := make([]*model.HospitalDeptInfo, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hospitalDeptInfoDo) FindInBatches(result *[]*model.HospitalDeptInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hospitalDeptInfoDo) Attrs(attrs ...field.AssignExpr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hospitalDeptInfoDo) Assign(attrs ...field.AssignExpr) IHospitalDeptInfoDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hospitalDeptInfoDo) Joins(fields ...field.RelationField) IHospitalDeptInfoDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hospitalDeptInfoDo) Preload(fields ...field.RelationField) IHospitalDeptInfoDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hospitalDeptInfoDo) FirstOrInit() (*model.HospitalDeptInfo, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HospitalDeptInfo), nil
	}
}

func (h hospitalDeptInfoDo) FirstOrCreate() (*model.HospitalDeptInfo, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HospitalDeptInfo), nil
	}
}

func (h hospitalDeptInfoDo) FindByPage(offset int, limit int) (result []*model.HospitalDeptInfo, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hospitalDeptInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hospitalDeptInfoDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hospitalDeptInfoDo) Delete(models ...*model.HospitalDeptInfo) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hospitalDeptInfoDo) withDO(do gen.Dao) *hospitalDeptInfoDo {
	h.DO = *do.(*gen.DO)
	return h
}
