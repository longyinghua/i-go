// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gorm-swagger-zap/dal/model"
)

func newMedicalExaminationAppointmentInfo(db *gorm.DB, opts ...gen.DOOption) medicalExaminationAppointmentInfo {
	_medicalExaminationAppointmentInfo := medicalExaminationAppointmentInfo{}

	_medicalExaminationAppointmentInfo.medicalExaminationAppointmentInfoDo.UseDB(db, opts...)
	_medicalExaminationAppointmentInfo.medicalExaminationAppointmentInfoDo.UseModel(&model.MedicalExaminationAppointmentInfo{})

	tableName := _medicalExaminationAppointmentInfo.medicalExaminationAppointmentInfoDo.TableName()
	_medicalExaminationAppointmentInfo.ALL = field.NewAsterisk(tableName)
	_medicalExaminationAppointmentInfo.ID = field.NewInt64(tableName, "id")
	_medicalExaminationAppointmentInfo.AppointState = field.NewInt32(tableName, "appoint_state")
	_medicalExaminationAppointmentInfo.MedExamSchID = field.NewInt64(tableName, "med_exam_sch_id")
	_medicalExaminationAppointmentInfo.SchDate = field.NewString(tableName, "sch_date")
	_medicalExaminationAppointmentInfo.UserID = field.NewInt64(tableName, "user_id")
	_medicalExaminationAppointmentInfo.VisitID = field.NewInt64(tableName, "visit_id")
	_medicalExaminationAppointmentInfo.HospitalID = field.NewInt64(tableName, "hospital_id")
	_medicalExaminationAppointmentInfo.HospitalName = field.NewString(tableName, "hospital_name")
	_medicalExaminationAppointmentInfo.MedExamType = field.NewInt32(tableName, "med_exam_type")
	_medicalExaminationAppointmentInfo.RealName = field.NewString(tableName, "real_name")
	_medicalExaminationAppointmentInfo.IDType = field.NewInt32(tableName, "id_type")
	_medicalExaminationAppointmentInfo.IDCardNo = field.NewString(tableName, "id_card_no")
	_medicalExaminationAppointmentInfo.Sex = field.NewInt32(tableName, "sex")
	_medicalExaminationAppointmentInfo.Mobile = field.NewString(tableName, "mobile")
	_medicalExaminationAppointmentInfo.MedicalCardType = field.NewString(tableName, "medical_card_type")
	_medicalExaminationAppointmentInfo.MedicalCardNo = field.NewString(tableName, "medical_card_no")
	_medicalExaminationAppointmentInfo.AdminRemark = field.NewString(tableName, "admin_remark")
	_medicalExaminationAppointmentInfo.CreateAt = field.NewTime(tableName, "create_at")
	_medicalExaminationAppointmentInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_medicalExaminationAppointmentInfo.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_medicalExaminationAppointmentInfo.UpdateUserID = field.NewInt64(tableName, "update_user_id")
	_medicalExaminationAppointmentInfo.OrderNum = field.NewInt32(tableName, "order_num")
	_medicalExaminationAppointmentInfo.Version = field.NewInt32(tableName, "version")
	_medicalExaminationAppointmentInfo.AppKey = field.NewString(tableName, "app_key")
	_medicalExaminationAppointmentInfo.DeleteFlag = field.NewField(tableName, "delete_flag")
	_medicalExaminationAppointmentInfo.UUID = field.NewString(tableName, "uuid")
	_medicalExaminationAppointmentInfo.Status = field.NewInt32(tableName, "status")
	_medicalExaminationAppointmentInfo.DraftData = field.NewString(tableName, "draft_data")
	_medicalExaminationAppointmentInfo.ProjectID = field.NewInt64(tableName, "project_id")
	_medicalExaminationAppointmentInfo.Tags = field.NewString(tableName, "tags")
	_medicalExaminationAppointmentInfo.ZyID = field.NewString(tableName, "zy_id")

	_medicalExaminationAppointmentInfo.fillFieldMap()

	return _medicalExaminationAppointmentInfo
}

// medicalExaminationAppointmentInfo 体检预约单信息
type medicalExaminationAppointmentInfo struct {
	medicalExaminationAppointmentInfoDo medicalExaminationAppointmentInfoDo

	ALL             field.Asterisk
	ID              field.Int64  // 自增id
	AppointState    field.Int32  // 体检预约单状态 -1预约失败 0接收预约 4客户取消
	MedExamSchID    field.Int64  // 体检排班id
	SchDate         field.String // 体检日期
	UserID          field.Int64  // 用户id
	VisitID         field.Int64  // 体检人id
	HospitalID      field.Int64  // 医院Id
	HospitalName    field.String // 医院名称(冗)
	MedExamType     field.Int32  // 体检类型 1入职体检 2驾驶员体检 3居住证体检
	RealName        field.String // 体检人姓名
	IDType          field.Int32  // 体检人证件类型(身份证，通行证，军人证，等)
	IDCardNo        field.String // 体检人证件号
	Sex             field.Int32  // 体检人性别 1：男 0：女
	Mobile          field.String // 体检人手机号
	MedicalCardType field.String // 体检人就诊卡类别
	MedicalCardNo   field.String // 体检人就诊卡号
	AdminRemark     field.String // 后台手工备注
	CreateAt        field.Time   // 创建时间
	UpdateAt        field.Time   // 修改时间
	CreateUserID    field.Int64  // 创建人id
	UpdateUserID    field.Int64  // 修改人id
	OrderNum        field.Int32  // 序号
	Version         field.Int32  // 乐观锁号
	AppKey          field.String // 应用key
	DeleteFlag      field.Field  // 逻辑删除
	UUID            field.String // uuid
	Status          field.Int32  // 业务状态，草稿，正常，禁用
	DraftData       field.String // 草稿
	ProjectID       field.Int64  // 项目id
	Tags            field.String // 标签
	ZyID            field.String

	fieldMap map[string]field.Expr
}

func (m medicalExaminationAppointmentInfo) Table(newTableName string) *medicalExaminationAppointmentInfo {
	m.medicalExaminationAppointmentInfoDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m medicalExaminationAppointmentInfo) As(alias string) *medicalExaminationAppointmentInfo {
	m.medicalExaminationAppointmentInfoDo.DO = *(m.medicalExaminationAppointmentInfoDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *medicalExaminationAppointmentInfo) updateTableName(table string) *medicalExaminationAppointmentInfo {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.AppointState = field.NewInt32(table, "appoint_state")
	m.MedExamSchID = field.NewInt64(table, "med_exam_sch_id")
	m.SchDate = field.NewString(table, "sch_date")
	m.UserID = field.NewInt64(table, "user_id")
	m.VisitID = field.NewInt64(table, "visit_id")
	m.HospitalID = field.NewInt64(table, "hospital_id")
	m.HospitalName = field.NewString(table, "hospital_name")
	m.MedExamType = field.NewInt32(table, "med_exam_type")
	m.RealName = field.NewString(table, "real_name")
	m.IDType = field.NewInt32(table, "id_type")
	m.IDCardNo = field.NewString(table, "id_card_no")
	m.Sex = field.NewInt32(table, "sex")
	m.Mobile = field.NewString(table, "mobile")
	m.MedicalCardType = field.NewString(table, "medical_card_type")
	m.MedicalCardNo = field.NewString(table, "medical_card_no")
	m.AdminRemark = field.NewString(table, "admin_remark")
	m.CreateAt = field.NewTime(table, "create_at")
	m.UpdateAt = field.NewTime(table, "update_at")
	m.CreateUserID = field.NewInt64(table, "create_user_id")
	m.UpdateUserID = field.NewInt64(table, "update_user_id")
	m.OrderNum = field.NewInt32(table, "order_num")
	m.Version = field.NewInt32(table, "version")
	m.AppKey = field.NewString(table, "app_key")
	m.DeleteFlag = field.NewField(table, "delete_flag")
	m.UUID = field.NewString(table, "uuid")
	m.Status = field.NewInt32(table, "status")
	m.DraftData = field.NewString(table, "draft_data")
	m.ProjectID = field.NewInt64(table, "project_id")
	m.Tags = field.NewString(table, "tags")
	m.ZyID = field.NewString(table, "zy_id")

	m.fillFieldMap()

	return m
}

func (m *medicalExaminationAppointmentInfo) WithContext(ctx context.Context) IMedicalExaminationAppointmentInfoDo {
	return m.medicalExaminationAppointmentInfoDo.WithContext(ctx)
}

func (m medicalExaminationAppointmentInfo) TableName() string {
	return m.medicalExaminationAppointmentInfoDo.TableName()
}

func (m medicalExaminationAppointmentInfo) Alias() string {
	return m.medicalExaminationAppointmentInfoDo.Alias()
}

func (m medicalExaminationAppointmentInfo) Columns(cols ...field.Expr) gen.Columns {
	return m.medicalExaminationAppointmentInfoDo.Columns(cols...)
}

func (m *medicalExaminationAppointmentInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *medicalExaminationAppointmentInfo) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 31)
	m.fieldMap["id"] = m.ID
	m.fieldMap["appoint_state"] = m.AppointState
	m.fieldMap["med_exam_sch_id"] = m.MedExamSchID
	m.fieldMap["sch_date"] = m.SchDate
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["visit_id"] = m.VisitID
	m.fieldMap["hospital_id"] = m.HospitalID
	m.fieldMap["hospital_name"] = m.HospitalName
	m.fieldMap["med_exam_type"] = m.MedExamType
	m.fieldMap["real_name"] = m.RealName
	m.fieldMap["id_type"] = m.IDType
	m.fieldMap["id_card_no"] = m.IDCardNo
	m.fieldMap["sex"] = m.Sex
	m.fieldMap["mobile"] = m.Mobile
	m.fieldMap["medical_card_type"] = m.MedicalCardType
	m.fieldMap["medical_card_no"] = m.MedicalCardNo
	m.fieldMap["admin_remark"] = m.AdminRemark
	m.fieldMap["create_at"] = m.CreateAt
	m.fieldMap["update_at"] = m.UpdateAt
	m.fieldMap["create_user_id"] = m.CreateUserID
	m.fieldMap["update_user_id"] = m.UpdateUserID
	m.fieldMap["order_num"] = m.OrderNum
	m.fieldMap["version"] = m.Version
	m.fieldMap["app_key"] = m.AppKey
	m.fieldMap["delete_flag"] = m.DeleteFlag
	m.fieldMap["uuid"] = m.UUID
	m.fieldMap["status"] = m.Status
	m.fieldMap["draft_data"] = m.DraftData
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["tags"] = m.Tags
	m.fieldMap["zy_id"] = m.ZyID
}

func (m medicalExaminationAppointmentInfo) clone(db *gorm.DB) medicalExaminationAppointmentInfo {
	m.medicalExaminationAppointmentInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m medicalExaminationAppointmentInfo) replaceDB(db *gorm.DB) medicalExaminationAppointmentInfo {
	m.medicalExaminationAppointmentInfoDo.ReplaceDB(db)
	return m
}

type medicalExaminationAppointmentInfoDo struct{ gen.DO }

type IMedicalExaminationAppointmentInfoDo interface {
	gen.SubQuery
	Debug() IMedicalExaminationAppointmentInfoDo
	WithContext(ctx context.Context) IMedicalExaminationAppointmentInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMedicalExaminationAppointmentInfoDo
	WriteDB() IMedicalExaminationAppointmentInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMedicalExaminationAppointmentInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMedicalExaminationAppointmentInfoDo
	Not(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo
	Or(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo
	Select(conds ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Where(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo
	Order(conds ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Distinct(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Omit(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Join(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Group(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo
	Having(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo
	Limit(limit int) IMedicalExaminationAppointmentInfoDo
	Offset(offset int) IMedicalExaminationAppointmentInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMedicalExaminationAppointmentInfoDo
	Unscoped() IMedicalExaminationAppointmentInfoDo
	Create(values ...*model.MedicalExaminationAppointmentInfo) error
	CreateInBatches(values []*model.MedicalExaminationAppointmentInfo, batchSize int) error
	Save(values ...*model.MedicalExaminationAppointmentInfo) error
	First() (*model.MedicalExaminationAppointmentInfo, error)
	Take() (*model.MedicalExaminationAppointmentInfo, error)
	Last() (*model.MedicalExaminationAppointmentInfo, error)
	Find() ([]*model.MedicalExaminationAppointmentInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MedicalExaminationAppointmentInfo, err error)
	FindInBatches(result *[]*model.MedicalExaminationAppointmentInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MedicalExaminationAppointmentInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMedicalExaminationAppointmentInfoDo
	Assign(attrs ...field.AssignExpr) IMedicalExaminationAppointmentInfoDo
	Joins(fields ...field.RelationField) IMedicalExaminationAppointmentInfoDo
	Preload(fields ...field.RelationField) IMedicalExaminationAppointmentInfoDo
	FirstOrInit() (*model.MedicalExaminationAppointmentInfo, error)
	FirstOrCreate() (*model.MedicalExaminationAppointmentInfo, error)
	FindByPage(offset int, limit int) (result []*model.MedicalExaminationAppointmentInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMedicalExaminationAppointmentInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m medicalExaminationAppointmentInfoDo) Debug() IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Debug())
}

func (m medicalExaminationAppointmentInfoDo) WithContext(ctx context.Context) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m medicalExaminationAppointmentInfoDo) ReadDB() IMedicalExaminationAppointmentInfoDo {
	return m.Clauses(dbresolver.Read)
}

func (m medicalExaminationAppointmentInfoDo) WriteDB() IMedicalExaminationAppointmentInfoDo {
	return m.Clauses(dbresolver.Write)
}

func (m medicalExaminationAppointmentInfoDo) Session(config *gorm.Session) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Session(config))
}

func (m medicalExaminationAppointmentInfoDo) Clauses(conds ...clause.Expression) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Returning(value interface{}, columns ...string) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m medicalExaminationAppointmentInfoDo) Not(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Or(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Select(conds ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Where(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Order(conds ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Distinct(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m medicalExaminationAppointmentInfoDo) Omit(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m medicalExaminationAppointmentInfoDo) Join(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m medicalExaminationAppointmentInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m medicalExaminationAppointmentInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m medicalExaminationAppointmentInfoDo) Group(cols ...field.Expr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m medicalExaminationAppointmentInfoDo) Having(conds ...gen.Condition) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m medicalExaminationAppointmentInfoDo) Limit(limit int) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m medicalExaminationAppointmentInfoDo) Offset(offset int) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m medicalExaminationAppointmentInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m medicalExaminationAppointmentInfoDo) Unscoped() IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Unscoped())
}

func (m medicalExaminationAppointmentInfoDo) Create(values ...*model.MedicalExaminationAppointmentInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m medicalExaminationAppointmentInfoDo) CreateInBatches(values []*model.MedicalExaminationAppointmentInfo, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m medicalExaminationAppointmentInfoDo) Save(values ...*model.MedicalExaminationAppointmentInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m medicalExaminationAppointmentInfoDo) First() (*model.MedicalExaminationAppointmentInfo, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MedicalExaminationAppointmentInfo), nil
	}
}

func (m medicalExaminationAppointmentInfoDo) Take() (*model.MedicalExaminationAppointmentInfo, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MedicalExaminationAppointmentInfo), nil
	}
}

func (m medicalExaminationAppointmentInfoDo) Last() (*model.MedicalExaminationAppointmentInfo, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MedicalExaminationAppointmentInfo), nil
	}
}

func (m medicalExaminationAppointmentInfoDo) Find() ([]*model.MedicalExaminationAppointmentInfo, error) {
	result, err := m.DO.Find()
	return result.([]*model.MedicalExaminationAppointmentInfo), err
}

func (m medicalExaminationAppointmentInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MedicalExaminationAppointmentInfo, err error) {
	buf := make([]*model.MedicalExaminationAppointmentInfo, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m medicalExaminationAppointmentInfoDo) FindInBatches(result *[]*model.MedicalExaminationAppointmentInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m medicalExaminationAppointmentInfoDo) Attrs(attrs ...field.AssignExpr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m medicalExaminationAppointmentInfoDo) Assign(attrs ...field.AssignExpr) IMedicalExaminationAppointmentInfoDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m medicalExaminationAppointmentInfoDo) Joins(fields ...field.RelationField) IMedicalExaminationAppointmentInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m medicalExaminationAppointmentInfoDo) Preload(fields ...field.RelationField) IMedicalExaminationAppointmentInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m medicalExaminationAppointmentInfoDo) FirstOrInit() (*model.MedicalExaminationAppointmentInfo, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MedicalExaminationAppointmentInfo), nil
	}
}

func (m medicalExaminationAppointmentInfoDo) FirstOrCreate() (*model.MedicalExaminationAppointmentInfo, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MedicalExaminationAppointmentInfo), nil
	}
}

func (m medicalExaminationAppointmentInfoDo) FindByPage(offset int, limit int) (result []*model.MedicalExaminationAppointmentInfo, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m medicalExaminationAppointmentInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m medicalExaminationAppointmentInfoDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m medicalExaminationAppointmentInfoDo) Delete(models ...*model.MedicalExaminationAppointmentInfo) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *medicalExaminationAppointmentInfoDo) withDO(do gen.Dao) *medicalExaminationAppointmentInfoDo {
	m.DO = *do.(*gen.DO)
	return m
}
