// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gorm-swagger-zap/dal/model"
)

func newDoctorScheduleRuleInfo(db *gorm.DB, opts ...gen.DOOption) doctorScheduleRuleInfo {
	_doctorScheduleRuleInfo := doctorScheduleRuleInfo{}

	_doctorScheduleRuleInfo.doctorScheduleRuleInfoDo.UseDB(db, opts...)
	_doctorScheduleRuleInfo.doctorScheduleRuleInfoDo.UseModel(&model.DoctorScheduleRuleInfo{})

	tableName := _doctorScheduleRuleInfo.doctorScheduleRuleInfoDo.TableName()
	_doctorScheduleRuleInfo.ALL = field.NewAsterisk(tableName)
	_doctorScheduleRuleInfo.ID = field.NewInt64(tableName, "id")
	_doctorScheduleRuleInfo.BaseDrID = field.NewInt64(tableName, "base_dr_id")
	_doctorScheduleRuleInfo.DrID = field.NewInt64(tableName, "dr_id")
	_doctorScheduleRuleInfo.HosID = field.NewInt64(tableName, "hos_id")
	_doctorScheduleRuleInfo.DiagType = field.NewInt32(tableName, "diag_type")
	_doctorScheduleRuleInfo.DiagPeriod = field.NewInt32(tableName, "diag_period")
	_doctorScheduleRuleInfo.WeekDay = field.NewInt32(tableName, "week_day")
	_doctorScheduleRuleInfo.SchBeginTime = field.NewTime(tableName, "sch_begin_time")
	_doctorScheduleRuleInfo.SchEndTime = field.NewTime(tableName, "sch_end_time")
	_doctorScheduleRuleInfo.OnlyFirst = field.NewField(tableName, "only_first")
	_doctorScheduleRuleInfo.OnlySecond = field.NewField(tableName, "only_second")
	_doctorScheduleRuleInfo.GetResID = field.NewInt64(tableName, "get_res_id")
	_doctorScheduleRuleInfo.FirstPrice = field.NewInt32(tableName, "first_price")
	_doctorScheduleRuleInfo.SecPrice = field.NewInt32(tableName, "sec_price")
	_doctorScheduleRuleInfo.IsDetailTime = field.NewField(tableName, "is_detail_time")
	_doctorScheduleRuleInfo.DetailTimeJSON = field.NewString(tableName, "detail_time_json")
	_doctorScheduleRuleInfo.SchType = field.NewInt32(tableName, "sch_type")
	_doctorScheduleRuleInfo.AvailableAppointNum = field.NewInt32(tableName, "available_appoint_num")
	_doctorScheduleRuleInfo.SchDayPeriod = field.NewInt32(tableName, "sch_day_period")
	_doctorScheduleRuleInfo.DrName = field.NewString(tableName, "dr_name")
	_doctorScheduleRuleInfo.HosName = field.NewString(tableName, "hos_name")
	_doctorScheduleRuleInfo.DeptID = field.NewInt64(tableName, "dept_id")
	_doctorScheduleRuleInfo.DeptName = field.NewString(tableName, "dept_name")
	_doctorScheduleRuleInfo.CreateAt = field.NewTime(tableName, "create_at")
	_doctorScheduleRuleInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_doctorScheduleRuleInfo.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_doctorScheduleRuleInfo.UpdateUserID = field.NewInt64(tableName, "update_user_id")
	_doctorScheduleRuleInfo.OrderNum = field.NewInt32(tableName, "order_num")
	_doctorScheduleRuleInfo.Version = field.NewInt32(tableName, "version")
	_doctorScheduleRuleInfo.AppKey = field.NewString(tableName, "app_key")
	_doctorScheduleRuleInfo.DeleteFlag = field.NewField(tableName, "delete_flag")
	_doctorScheduleRuleInfo.UUID = field.NewString(tableName, "uuid")
	_doctorScheduleRuleInfo.Status = field.NewInt32(tableName, "status")
	_doctorScheduleRuleInfo.DraftData = field.NewString(tableName, "draft_data")
	_doctorScheduleRuleInfo.ProjectID = field.NewInt64(tableName, "project_id")
	_doctorScheduleRuleInfo.Tags = field.NewString(tableName, "tags")
	_doctorScheduleRuleInfo.ZyID = field.NewString(tableName, "zy_id")

	_doctorScheduleRuleInfo.fillFieldMap()

	return _doctorScheduleRuleInfo
}

// doctorScheduleRuleInfo 医生排班规则
type doctorScheduleRuleInfo struct {
	doctorScheduleRuleInfoDo doctorScheduleRuleInfoDo

	ALL                 field.Asterisk
	ID                  field.Int64  // id
	BaseDrID            field.Int64  // 基础医生id
	DrID                field.Int64  // 医生id
	HosID               field.Int64  // 医院id
	DiagType            field.Int32  // 0未设置 1特需门诊 2专家门诊 3专病专科门诊 4普通门诊 5高级专家门诊 6特约门诊 7疑难门诊 8名老中医 9膏方门诊 15特色门诊 703571精品门诊 5270普外科换药便民门诊
	DiagPeriod          field.Int32  // 门诊周期（1每周/2每月单周/3每月双周/4每月第一周/5每月第二周/6每月第三周/7每月第四周/8全年单周/9全年双周）
	WeekDay             field.Int32  // 星期x（1-7）
	SchBeginTime        field.Time   // 排班开始时间
	SchEndTime          field.Time   // 排班结束时间
	OnlyFirst           field.Field  // 只能初诊
	OnlySecond          field.Field  // 只能复诊
	GetResID            field.Int64  // 取号说明id
	FirstPrice          field.Int32  // 初诊价格(分)
	SecPrice            field.Int32  // 复诊价格(分)
	IsDetailTime        field.Field  // 是否选时排班
	DetailTimeJSON      field.String // 选时json[]
	SchType             field.Int32  // 排班类别（0夜晚，1上午，2下午，3白天）
	AvailableAppointNum field.Int32  // 号源数量
	SchDayPeriod        field.Int32  // 排班生成周期(天)
	DrName              field.String // 医生姓名(冗)
	HosName             field.String // 医院名称(冗)
	DeptID              field.Int64  // （二级）科室ID
	DeptName            field.String // （二级）科室名称
	CreateAt            field.Time   // 创建时间
	UpdateAt            field.Time   // 修改时间
	CreateUserID        field.Int64  // 创建人id
	UpdateUserID        field.Int64  // 修改人id
	OrderNum            field.Int32  // 序号
	Version             field.Int32  // 乐观锁号
	AppKey              field.String // 应用key
	DeleteFlag          field.Field  // 逻辑删除
	UUID                field.String // uuid
	Status              field.Int32  // 业务状态，草稿，正常，禁用
	DraftData           field.String // 草稿
	ProjectID           field.Int64  // 项目id
	Tags                field.String // 标签
	ZyID                field.String // 助医网id

	fieldMap map[string]field.Expr
}

func (d doctorScheduleRuleInfo) Table(newTableName string) *doctorScheduleRuleInfo {
	d.doctorScheduleRuleInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d doctorScheduleRuleInfo) As(alias string) *doctorScheduleRuleInfo {
	d.doctorScheduleRuleInfoDo.DO = *(d.doctorScheduleRuleInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *doctorScheduleRuleInfo) updateTableName(table string) *doctorScheduleRuleInfo {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.BaseDrID = field.NewInt64(table, "base_dr_id")
	d.DrID = field.NewInt64(table, "dr_id")
	d.HosID = field.NewInt64(table, "hos_id")
	d.DiagType = field.NewInt32(table, "diag_type")
	d.DiagPeriod = field.NewInt32(table, "diag_period")
	d.WeekDay = field.NewInt32(table, "week_day")
	d.SchBeginTime = field.NewTime(table, "sch_begin_time")
	d.SchEndTime = field.NewTime(table, "sch_end_time")
	d.OnlyFirst = field.NewField(table, "only_first")
	d.OnlySecond = field.NewField(table, "only_second")
	d.GetResID = field.NewInt64(table, "get_res_id")
	d.FirstPrice = field.NewInt32(table, "first_price")
	d.SecPrice = field.NewInt32(table, "sec_price")
	d.IsDetailTime = field.NewField(table, "is_detail_time")
	d.DetailTimeJSON = field.NewString(table, "detail_time_json")
	d.SchType = field.NewInt32(table, "sch_type")
	d.AvailableAppointNum = field.NewInt32(table, "available_appoint_num")
	d.SchDayPeriod = field.NewInt32(table, "sch_day_period")
	d.DrName = field.NewString(table, "dr_name")
	d.HosName = field.NewString(table, "hos_name")
	d.DeptID = field.NewInt64(table, "dept_id")
	d.DeptName = field.NewString(table, "dept_name")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.CreateUserID = field.NewInt64(table, "create_user_id")
	d.UpdateUserID = field.NewInt64(table, "update_user_id")
	d.OrderNum = field.NewInt32(table, "order_num")
	d.Version = field.NewInt32(table, "version")
	d.AppKey = field.NewString(table, "app_key")
	d.DeleteFlag = field.NewField(table, "delete_flag")
	d.UUID = field.NewString(table, "uuid")
	d.Status = field.NewInt32(table, "status")
	d.DraftData = field.NewString(table, "draft_data")
	d.ProjectID = field.NewInt64(table, "project_id")
	d.Tags = field.NewString(table, "tags")
	d.ZyID = field.NewString(table, "zy_id")

	d.fillFieldMap()

	return d
}

func (d *doctorScheduleRuleInfo) WithContext(ctx context.Context) IDoctorScheduleRuleInfoDo {
	return d.doctorScheduleRuleInfoDo.WithContext(ctx)
}

func (d doctorScheduleRuleInfo) TableName() string { return d.doctorScheduleRuleInfoDo.TableName() }

func (d doctorScheduleRuleInfo) Alias() string { return d.doctorScheduleRuleInfoDo.Alias() }

func (d doctorScheduleRuleInfo) Columns(cols ...field.Expr) gen.Columns {
	return d.doctorScheduleRuleInfoDo.Columns(cols...)
}

func (d *doctorScheduleRuleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *doctorScheduleRuleInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 37)
	d.fieldMap["id"] = d.ID
	d.fieldMap["base_dr_id"] = d.BaseDrID
	d.fieldMap["dr_id"] = d.DrID
	d.fieldMap["hos_id"] = d.HosID
	d.fieldMap["diag_type"] = d.DiagType
	d.fieldMap["diag_period"] = d.DiagPeriod
	d.fieldMap["week_day"] = d.WeekDay
	d.fieldMap["sch_begin_time"] = d.SchBeginTime
	d.fieldMap["sch_end_time"] = d.SchEndTime
	d.fieldMap["only_first"] = d.OnlyFirst
	d.fieldMap["only_second"] = d.OnlySecond
	d.fieldMap["get_res_id"] = d.GetResID
	d.fieldMap["first_price"] = d.FirstPrice
	d.fieldMap["sec_price"] = d.SecPrice
	d.fieldMap["is_detail_time"] = d.IsDetailTime
	d.fieldMap["detail_time_json"] = d.DetailTimeJSON
	d.fieldMap["sch_type"] = d.SchType
	d.fieldMap["available_appoint_num"] = d.AvailableAppointNum
	d.fieldMap["sch_day_period"] = d.SchDayPeriod
	d.fieldMap["dr_name"] = d.DrName
	d.fieldMap["hos_name"] = d.HosName
	d.fieldMap["dept_id"] = d.DeptID
	d.fieldMap["dept_name"] = d.DeptName
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["create_user_id"] = d.CreateUserID
	d.fieldMap["update_user_id"] = d.UpdateUserID
	d.fieldMap["order_num"] = d.OrderNum
	d.fieldMap["version"] = d.Version
	d.fieldMap["app_key"] = d.AppKey
	d.fieldMap["delete_flag"] = d.DeleteFlag
	d.fieldMap["uuid"] = d.UUID
	d.fieldMap["status"] = d.Status
	d.fieldMap["draft_data"] = d.DraftData
	d.fieldMap["project_id"] = d.ProjectID
	d.fieldMap["tags"] = d.Tags
	d.fieldMap["zy_id"] = d.ZyID
}

func (d doctorScheduleRuleInfo) clone(db *gorm.DB) doctorScheduleRuleInfo {
	d.doctorScheduleRuleInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d doctorScheduleRuleInfo) replaceDB(db *gorm.DB) doctorScheduleRuleInfo {
	d.doctorScheduleRuleInfoDo.ReplaceDB(db)
	return d
}

type doctorScheduleRuleInfoDo struct{ gen.DO }

type IDoctorScheduleRuleInfoDo interface {
	gen.SubQuery
	Debug() IDoctorScheduleRuleInfoDo
	WithContext(ctx context.Context) IDoctorScheduleRuleInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDoctorScheduleRuleInfoDo
	WriteDB() IDoctorScheduleRuleInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDoctorScheduleRuleInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDoctorScheduleRuleInfoDo
	Not(conds ...gen.Condition) IDoctorScheduleRuleInfoDo
	Or(conds ...gen.Condition) IDoctorScheduleRuleInfoDo
	Select(conds ...field.Expr) IDoctorScheduleRuleInfoDo
	Where(conds ...gen.Condition) IDoctorScheduleRuleInfoDo
	Order(conds ...field.Expr) IDoctorScheduleRuleInfoDo
	Distinct(cols ...field.Expr) IDoctorScheduleRuleInfoDo
	Omit(cols ...field.Expr) IDoctorScheduleRuleInfoDo
	Join(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo
	Group(cols ...field.Expr) IDoctorScheduleRuleInfoDo
	Having(conds ...gen.Condition) IDoctorScheduleRuleInfoDo
	Limit(limit int) IDoctorScheduleRuleInfoDo
	Offset(offset int) IDoctorScheduleRuleInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDoctorScheduleRuleInfoDo
	Unscoped() IDoctorScheduleRuleInfoDo
	Create(values ...*model.DoctorScheduleRuleInfo) error
	CreateInBatches(values []*model.DoctorScheduleRuleInfo, batchSize int) error
	Save(values ...*model.DoctorScheduleRuleInfo) error
	First() (*model.DoctorScheduleRuleInfo, error)
	Take() (*model.DoctorScheduleRuleInfo, error)
	Last() (*model.DoctorScheduleRuleInfo, error)
	Find() ([]*model.DoctorScheduleRuleInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DoctorScheduleRuleInfo, err error)
	FindInBatches(result *[]*model.DoctorScheduleRuleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DoctorScheduleRuleInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDoctorScheduleRuleInfoDo
	Assign(attrs ...field.AssignExpr) IDoctorScheduleRuleInfoDo
	Joins(fields ...field.RelationField) IDoctorScheduleRuleInfoDo
	Preload(fields ...field.RelationField) IDoctorScheduleRuleInfoDo
	FirstOrInit() (*model.DoctorScheduleRuleInfo, error)
	FirstOrCreate() (*model.DoctorScheduleRuleInfo, error)
	FindByPage(offset int, limit int) (result []*model.DoctorScheduleRuleInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDoctorScheduleRuleInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d doctorScheduleRuleInfoDo) Debug() IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d doctorScheduleRuleInfoDo) WithContext(ctx context.Context) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d doctorScheduleRuleInfoDo) ReadDB() IDoctorScheduleRuleInfoDo {
	return d.Clauses(dbresolver.Read)
}

func (d doctorScheduleRuleInfoDo) WriteDB() IDoctorScheduleRuleInfoDo {
	return d.Clauses(dbresolver.Write)
}

func (d doctorScheduleRuleInfoDo) Session(config *gorm.Session) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Session(config))
}

func (d doctorScheduleRuleInfoDo) Clauses(conds ...clause.Expression) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d doctorScheduleRuleInfoDo) Returning(value interface{}, columns ...string) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d doctorScheduleRuleInfoDo) Not(conds ...gen.Condition) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d doctorScheduleRuleInfoDo) Or(conds ...gen.Condition) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d doctorScheduleRuleInfoDo) Select(conds ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d doctorScheduleRuleInfoDo) Where(conds ...gen.Condition) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d doctorScheduleRuleInfoDo) Order(conds ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d doctorScheduleRuleInfoDo) Distinct(cols ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d doctorScheduleRuleInfoDo) Omit(cols ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d doctorScheduleRuleInfoDo) Join(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d doctorScheduleRuleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d doctorScheduleRuleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d doctorScheduleRuleInfoDo) Group(cols ...field.Expr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d doctorScheduleRuleInfoDo) Having(conds ...gen.Condition) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d doctorScheduleRuleInfoDo) Limit(limit int) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d doctorScheduleRuleInfoDo) Offset(offset int) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d doctorScheduleRuleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d doctorScheduleRuleInfoDo) Unscoped() IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d doctorScheduleRuleInfoDo) Create(values ...*model.DoctorScheduleRuleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d doctorScheduleRuleInfoDo) CreateInBatches(values []*model.DoctorScheduleRuleInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d doctorScheduleRuleInfoDo) Save(values ...*model.DoctorScheduleRuleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d doctorScheduleRuleInfoDo) First() (*model.DoctorScheduleRuleInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctorScheduleRuleInfo), nil
	}
}

func (d doctorScheduleRuleInfoDo) Take() (*model.DoctorScheduleRuleInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctorScheduleRuleInfo), nil
	}
}

func (d doctorScheduleRuleInfoDo) Last() (*model.DoctorScheduleRuleInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctorScheduleRuleInfo), nil
	}
}

func (d doctorScheduleRuleInfoDo) Find() ([]*model.DoctorScheduleRuleInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DoctorScheduleRuleInfo), err
}

func (d doctorScheduleRuleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DoctorScheduleRuleInfo, err error) {
	buf := make([]*model.DoctorScheduleRuleInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d doctorScheduleRuleInfoDo) FindInBatches(result *[]*model.DoctorScheduleRuleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d doctorScheduleRuleInfoDo) Attrs(attrs ...field.AssignExpr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d doctorScheduleRuleInfoDo) Assign(attrs ...field.AssignExpr) IDoctorScheduleRuleInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d doctorScheduleRuleInfoDo) Joins(fields ...field.RelationField) IDoctorScheduleRuleInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d doctorScheduleRuleInfoDo) Preload(fields ...field.RelationField) IDoctorScheduleRuleInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d doctorScheduleRuleInfoDo) FirstOrInit() (*model.DoctorScheduleRuleInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctorScheduleRuleInfo), nil
	}
}

func (d doctorScheduleRuleInfoDo) FirstOrCreate() (*model.DoctorScheduleRuleInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DoctorScheduleRuleInfo), nil
	}
}

func (d doctorScheduleRuleInfoDo) FindByPage(offset int, limit int) (result []*model.DoctorScheduleRuleInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d doctorScheduleRuleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d doctorScheduleRuleInfoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d doctorScheduleRuleInfoDo) Delete(models ...*model.DoctorScheduleRuleInfo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *doctorScheduleRuleInfoDo) withDO(do gen.Dao) *doctorScheduleRuleInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
